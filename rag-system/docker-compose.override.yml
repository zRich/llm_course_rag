# Docker Compose 开发环境覆盖配置
# 此文件会自动与 docker-compose.yml 合并
# 用于开发环境的特殊配置

services:
  # PostgreSQL 开发环境配置
  postgres:
    environment:
      # 开发环境启用详细日志
      POSTGRES_LOG_STATEMENT: all
      POSTGRES_LOG_MIN_DURATION_STATEMENT: 0
    volumes:
      # 挂载本地SQL脚本用于开发测试
      - ./scripts/sql:/scripts:ro
    # 开发环境可以使用更宽松的健康检查
    healthcheck:
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Redis 开发环境配置
  redis:
    # 开发环境启用Redis命令监控
    command: redis-server /usr/local/etc/redis/redis.conf --loglevel verbose
    volumes:
      # 挂载开发环境Redis配置
      - ./docker/redis/redis-dev.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      interval: 5s
      timeout: 2s
      retries: 3

  # Qdrant 开发环境配置
  qdrant:
    environment:
      # 开发环境启用详细日志
      QDRANT__LOG_LEVEL: DEBUG
      # 开发环境禁用认证以便测试
      QDRANT__SERVICE__ENABLE_CORS: true
    healthcheck:
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 20s

  # MinIO 开发环境配置
  minio:
    environment:
      # 开发环境启用详细日志
      MINIO_LOG_LEVEL: DEBUG
      # 开发环境配置
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    healthcheck:
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 15s



  # 开发环境专用服务：Adminer 数据库管理工具
  adminer:
    image: adminer:4.8.1
    container_name: rag_adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - rag-network
    depends_on:
      - postgres
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha

  # 开发环境专用服务：Redis Commander
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: rag_redis_commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    networks:
      - rag-network
    depends_on:
      - redis
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: admin
      HTTP_PASSWORD: admin123